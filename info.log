Server has started and is listening on 5000
Here is the console log method.
[0mGET /api/profile/fairy [32m200 [0m5.132 ms - 32[0m
[0mGET / [36m304 [0m1.490 ms - -[0m
[0mGET /vendor.4f38c52306c6a01ef5c5.js [36m304 [0m0.925 ms - -[0m
[0mGET /app.41132f010e8285d9dea3.js [36m304 [0m0.998 ms - -[0m
Server has started and is listening on 5000
Here is the console log method.
[0mGET /api/profile/fairy [32m200 [0m5.245 ms - 32[0m
Here is the console log method.
[0mGET /api/profile/fairy [32m200 [0m0.810 ms - 32[0m
Server has started and is listening on 5000
Here is the console log method.
[0mGET /api/profile/fairy [32m200 [0m6.492 ms - 28[0m
Here is the console log method.
[0mGET /api/profile/fairy [32m200 [0m0.752 ms - 28[0m
Here is the console log method.
[0mGET /api/profile/fairy [32m200 [0m0.533 ms - 28[0m
[0mGET / [36m304 [0m1.573 ms - -[0m
[0mGET /vendor.4f38c52306c6a01ef5c5.js [36m304 [0m0.406 ms - -[0m
[0mGET /app.41132f010e8285d9dea3.js [36m304 [0m0.940 ms - -[0m
[0mGET /fonts/source-sans-pro-v11-latin-regular.f94f84eb867a3e3d65da0c5cad065437.woff [32m200 [0m2.793 ms - 19616[0m
[0mGET /fonts/MaterialIcons-Regular.012cf6a10129e2275d79d6adac7f3b02.woff [32m200 [0m2.460 ms - 57620[0m
[0mGET /fonts/fontawesome-webfont.af7ae505a9eed503f8b8e6982036873e.woff2 [32m200 [0m1.916 ms - 77160[0m
[0mGET / [36m304 [0m0.412 ms - -[0m
[0mGET /vendor.4f38c52306c6a01ef5c5.js [36m304 [0m0.641 ms - -[0m
[0mGET /app.41132f010e8285d9dea3.js [36m304 [0m0.637 ms - -[0m
Here is the console log method.
[0mGET /api/profile/fairy [32m200 [0m0.604 ms - 28[0m
🚀 Server has started and is listening on 5000
Graphql is listing on has started and is listening on /graphql
"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

"use strict";

require("core-js/modules/es6.promise");

require("regenerator-runtime/runtime");

var _path = _interopRequireDefault(require("path"));

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _http = _interopRequireDefault(require("http"));

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _helmet = _interopRequireDefault(require("helmet"));

var _compression = _interopRequireDefault(require("compression"));

var _dotenv = require("dotenv");

var _schema = _interopRequireDefault(require("./schema"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

(0, _dotenv.config)();
var port = process.env.PORT || 5000;
var app = (0, _express.default)();

var publicPath = _path.default.join(__dirname, '../dist');

var server = _http.default.createServer(app);

_schema.default.applyMiddleware({
  app: app
});

app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.urlencoded({
  extended: false
}));
app.use(_bodyParser.default.json());
app.use(require('morgan')('dev'));
app.use((0, _compression.default)());
app.use(_express.default.static(publicPath));

_schema.default.installSubscriptionHandlers(server);

if (process.env.NODE_ENV === 'development') {
  _schema.default.graphqlPath = port;
}

app.get('*',
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(request, response) {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            try {
              response.sendFile(_path.default.resolve(publicPath, 'index.html'));
            } catch (e) {
              response.json(new Error('Something went wrong.'));
            }

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
process.on('SIGINT',
/*#__PURE__*/
_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee2() {
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          console.info('SIGINT signal received.');
          _context2.prev = 1;
          _context2.next = 4;
          return server.close();

        case 4:
          _context2.next = 10;
          break;

        case 6:
          _context2.prev = 6;
          _context2.t0 = _context2["catch"](1);
          console.log(_context2.t0);
          process.exit(1);

        case 10:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this, [[1, 6]]);
})));

_asyncToGenerator(
/*#__PURE__*/
regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return server.listen(port);

        case 2:
          console.log("\uD83D\uDE80 Server has started and is listening on " + port);
          console.info('Graphql is listing on has started and is listening on', _schema.default.graphqlPath);

        case 4:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3, this);
}))();

🚀 Server has started and is listening on 5000
Graphql is listing on has started and is listening on /graphql
SIGINT signal received.
🚀 Server has started and is listening on 5000
Graphql is listing on has started and is listening on /graphql
[0mGET / [32m200 [0m12.478 ms - 282[0m
[0mGET /app.41132f010e8285d9dea3.js [32m200 [0m6.590 ms - -[0m
[0mGET /vendor.4f38c52306c6a01ef5c5.js [32m200 [0m7.290 ms - -[0m
[0mGET /fonts/source-sans-pro-v11-latin-regular.f94f84eb867a3e3d65da0c5cad065437.woff [32m200 [0m0.802 ms - 19616[0m
[0mGET /fonts/MaterialIcons-Regular.012cf6a10129e2275d79d6adac7f3b02.woff [32m200 [0m0.654 ms - 57620[0m
[0mGET /fonts/fontawesome-webfont.af7ae505a9eed503f8b8e6982036873e.woff2 [32m200 [0m0.841 ms - 77160[0m
[0mGET /favicon.ico [0m- [0m- ms - -[0m
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
BC
[0mGET / [32m200 [0m1.643 ms - 280[0m
[0mGET /app.acd7e6a8d711a5de8fbf.js [32m200 [0m1.031 ms - -[0m
[0mGET /vendor.f6347e1b121bc058e1d9.js [32m200 [0m1.186 ms - -[0m
[0mGET /2.263a179c5fdc0e245fa8.js [32m200 [0m0.739 ms - -[0m
BC
[0mGET / [32m200 [0m0.397 ms - 280[0m
[0mGET /app.acd7e6a8d711a5de8fbf.js [32m200 [0m0.789 ms - -[0m
[0mGET /vendor.f6347e1b121bc058e1d9.js [32m200 [0m0.932 ms - -[0m
[0mGET /2.263a179c5fdc0e245fa8.js [32m200 [0m0.667 ms - -[0m
BC
[0mGET /fonts/source-sans-pro-v11-latin-regular.f94f84eb867a3e3d65da0c5cad065437.woff [32m200 [0m0.611 ms - 19616[0m
[0mGET /fonts/MaterialIcons-Regular.012cf6a10129e2275d79d6adac7f3b02.woff [32m200 [0m1.317 ms - 57620[0m
[0mGET /fonts/fontawesome-webfont.af7ae505a9eed503f8b8e6982036873e.woff2 [32m200 [0m0.631 ms - 77160[0m
[0mGET /favicon.ico [32m200 [0m0.983 ms - 280[0m
BC
[0mGET / [32m200 [0m0.425 ms - 280[0m
[0mGET /app.acd7e6a8d711a5de8fbf.js [32m200 [0m0.743 ms - -[0m
[0mGET /vendor.f6347e1b121bc058e1d9.js [32m200 [0m0.885 ms - -[0m
[0mGET /2.263a179c5fdc0e245fa8.js [32m200 [0m0.768 ms - -[0m
BC
[0mGET /fonts/MaterialIcons-Regular.012cf6a10129e2275d79d6adac7f3b02.woff [32m200 [0m1.180 ms - 57620[0m
[0mGET /fonts/source-sans-pro-v11-latin-regular.f94f84eb867a3e3d65da0c5cad065437.woff [32m200 [0m1.373 ms - 19616[0m
[0mGET /fonts/fontawesome-webfont.af7ae505a9eed503f8b8e6982036873e.woff2 [32m200 [0m1.664 ms - 77160[0m
[0mGET /favicon.ico [32m200 [0m0.568 ms - 280[0m
BC
BC
BC
BC
BC
BC
BC
🚀 Server has started and is listening on 5000
Graphql is listing on has started and is listening on /graphql
[0mGET / [32m200 [0m5.899 ms - 280[0m
[0mGET /app.acd7e6a8d711a5de8fbf.js [32m200 [0m4.686 ms - -[0m
[0mGET /vendor.f6347e1b121bc058e1d9.js [32m200 [0m4.721 ms - -[0m
[0mGET /2.263a179c5fdc0e245fa8.js [32m200 [0m0.810 ms - -[0m
[0mGET /fonts/source-sans-pro-v11-latin-regular.f94f84eb867a3e3d65da0c5cad065437.woff [32m200 [0m0.596 ms - 19616[0m
[0mGET /fonts/MaterialIcons-Regular.012cf6a10129e2275d79d6adac7f3b02.woff [32m200 [0m1.041 ms - 57620[0m
[0mGET /fonts/fontawesome-webfont.af7ae505a9eed503f8b8e6982036873e.woff2 [32m200 [0m1.158 ms - 77160[0m
[0mGET /favicon.ico [32m200 [0m1.967 ms - 280[0m
[0mGET / [36m304 [0m0.831 ms - -[0m
[0mGET /vendor.f6347e1b121bc058e1d9.js [36m304 [0m0.764 ms - -[0m
[0mGET /app.acd7e6a8d711a5de8fbf.js [36m304 [0m0.764 ms - -[0m
[0mGET /2.263a179c5fdc0e245fa8.js [36m304 [0m0.378 ms - -[0m
SIGINT signal received.
🏭 This is the production build.
🚀 Server has started and is listening on 5000
Graphql is listing on has started and is listening on /graphql
[0mGET / [36m304 [0m3.894 ms - -[0m
[0mGET /vendor.f6347e1b121bc058e1d9.js [36m304 [0m0.868 ms - -[0m
[0mGET /app.acd7e6a8d711a5de8fbf.js [36m304 [0m0.845 ms - -[0m
[0mGET /2.263a179c5fdc0e245fa8.js [36m304 [0m0.259 ms - -[0m
SIGINT signal received.
🏭 This is the production build.
🚀 Server has started and is listening on 5000
Graphql is listing on has started and is listening on /graphql
SIGINT signal received.
